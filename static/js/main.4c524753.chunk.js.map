{"version":3,"sources":["index.js"],"names":["Square","props","className","class","onClick","value","Board","i","isWinnerSquare","this","winnerPosition","forEach","e","squares","board","map","n","index","square","push","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","ascend","winner","slice","length","setState","concat","setWinner","winnerInfo","lines","a","b","c","calculateWinner","step","current","status","moves","move","desc","position","currentStep","iconButton","icon","faClock","jumpTo","sortText","reverse","handleClick","sortHistory","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c524753.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClock } from '@fortawesome/free-solid-svg-icons'\nimport './index.css';\n\n// https://ja.reactjs.org/tutorial/tutorial.html#completing-the-game\n\n// 関数コンポーネント\nfunction Square(props) {\n  return (\n    // ボタンをクリックされたらBoardから渡されたonClickプロパティを呼ぶ\n    <button className={`${props.class} square`} onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    // 勝者がいる場合、決め手のマスにクラス付与\n    let isWinnerSquare = null;\n    if (this.props.winnerPosition !== null) {\n      this.props.winnerPosition.forEach((e) => {\n        if (e === i) {\n          isWinnerSquare = 'is-winner';\n        }\n      });\n    }\n    return (\n      <Square \n        key={i}\n        value={this.props.squares[i]}\n        // SquareにonClickを渡す\n        onClick={() => this.props.onClick(i)}\n        class={isWinnerSquare}\n      />\n    );\n  }\n\n  render() {\n    // ボード描画\n    const board = [0, 3, 6].map((n, index) => {\n      let square = [];\n      for (let i = 0; i < 3; i++) {\n        square.push(this.renderSquare(i + n));\n      }\n      return (\n        <div key={index} className=\"board-row\">\n          {square}\n        </div>\n      )\n    })\n    return (\n      <div>{board}</div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0, //いま何手目か\n      xIsNext: true, //Xが先手\n      ascend: true, //ソート\n      winner: null, //勝者\n      winnerPosition: null, //勝者の手\n    };\n  }\n\n  /**\n   * \n   * @param {Number} i 押されたマス目の位置\n   * @returns \n   */\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1); //時間を巻き戻したら不要な未来の履歴を消す\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    // 決着がついていたらreturn\n    if (this.state.winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext, //次のプレーヤーへ\n    });\n\n    this.setWinner(squares);\n  }\n\n  // 勝者記録\n  setWinner(squares) {\n    const winnerInfo = calculateWinner(squares);\n    this.setState({\n      winner: winnerInfo[0],\n      winnerPosition: winnerInfo[1],\n    });\n  }\n\n  jumpTo(step) {\n    // 任意のステップに移動\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n\n    // ステップを移動したら勝者情報も更新する\n    const history = this.state.history;\n    const current = history[step];\n    this.setWinner(current.squares);\n  }\n\n  // 履歴 降順昇順\n  sortHistory() {\n    this.setState({\n      ascend: !this.state.ascend,\n    })\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber]; //現在のステップ\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n\n      // 履歴でどのマスに置いたか表示\n      let position = null;\n      if (move > 0) {\n        step.squares.forEach(function(value, index) {\n          if (value !== history[move-1].squares[index]) {\n            position = ` - [${index}]`;\n            return;\n          }\n        })\n      }\n\n      // 現在のステップかどうか\n      const currentStep = move === this.state.stepNumber ?\n        'is-current' :\n        null;\n\n      // 時計アイコンつける\n      const iconButton = move ?\n        null :\n        <FontAwesomeIcon icon={faClock} />;\n\n      return (\n        <li key={move} className={currentStep}>\n          <button onClick={() => this.jumpTo(move)}>{desc}{iconButton}</button>\n          <span className=\"position\">{position}</span>\n        </li>\n      );\n    });\n\n    // 手番表示\n    let status;\n    if (this.state.winner) {\n      status = 'Winner: ' + this.state.winner;\n    } else if (this.state.stepNumber === 9) {\n      status = 'DRAW';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    // 昇順降順\n    const sortText = this.state.ascend ?\n      '▲Ascending' :\n      '▼Descending';\n\n    if(!this.state.ascend) moves.reverse();\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            winnerPosition={this.state.winnerPosition}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div className=\"game-history\">\n            <button onClick={() => this.sortHistory()} className=\"btn-sort\">{sortText}</button>\n            <ol className=\"list-moves\">{moves}</ol>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n// 勝敗判定\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return [squares[a], lines[i]];\n    }\n  }\n  return [null, null];\n}"],"sourceRoot":""}